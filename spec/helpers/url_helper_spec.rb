require 'rails_helper'

describe MagicLinks::UrlHelper do
  let(:user) { create(:user) }
  let(:template_name) { 'test_template' }
  let(:target_path) { '/test_path/dashboard' }
  let(:expiry) { 1.day }
  let(:template) { double(:template) }
  let(:instance) do
    klass = Class.new
    klass.include described_class
    klass.new
  end

  before do
    allow(MagicLinks::Templates).to receive(:find).with(template_name).and_return template
  end

  describe '.magic_link_for' do
    subject { instance.magic_link_for(user, template_name, target_path, expiry) }

    it 'returns a magic link path generated by the template' do
      mock_path = double
      expect(template).to receive(:magic_link_for).with(user, target_path, expiry).and_return mock_path
      expect(subject).to be mock_path
    end

    context 'when no template exists with the requested name' do
      let(:template) { nil }

      it 'raises an error' do
        expect { subject }.to raise_error ArgumentError
      end
    end
  end

  describe '.magic_url_for' do
    subject { instance.magic_url_for(user, template_name, target_path, expiry) }

    it 'returns a magic link url generated by the template' do
      mock_url = double
      expect(template).to receive(:magic_url_for).with(user, target_path, expiry).and_return mock_url
      expect(subject).to be mock_url
    end

    context 'when no template exists with the requested name' do
      let(:template) { nil }

      it 'raises an error' do
        expect { subject }.to raise_error ArgumentError
      end
    end
  end
end
